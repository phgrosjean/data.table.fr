title:
  original: ' Split data.table into chunks in a list '
  translation: ~
description:
  original: |2
      Split method for data.table. Faster and more flexible. Be aware that processing list of data.tables will be generally much slower than manipulation in single data.table by group using \code{by} argument, read more on \code{\link{data.table}}.
  translation: ~
arguments:
  x:
    original: 'data.table '
    translation: ~
  f:
    original: Same as \code{\link[base:split]{split.data.frame}}. Use \code{by} argument
      instead, this is just for consistency with data.frame method.
    translation: ~
  drop:
    original: logical. Default \code{FALSE} will not drop empty list elements caused
      by factor levels not referred by that factors. Works also with new arguments
      of split data.table method.
    translation: ~
  by:
    original: character vector. Column names on which split should be made. For \code{length(by)
      > 1L} and \code{flatten} FALSE it will result nested lists with data.tables
      on leafs.
    translation: ~
  sorted:
    original: When default \code{FALSE} it will retain the order of groups we are
      splitting on. When \code{TRUE} then sorted list(s) are returned. Does not have
      effect for \code{f} argument.
    translation: ~
  keep.by:
    original: logical default \code{TRUE}. Keep column provided to \code{by} argument.
    translation: ~
  flatten:
    original: logical default \code{TRUE} will unlist nested lists of data.tables.
      When using \code{f} results are always flattened to list of data.tables.
    translation: ~
  \dots:
    original: When using \code{f}, passed to \code{\link[base:split]{split.data.frame}}.
      When using \code{by}, \code{sep} is recognized as with the default method.
    translation: ~
  verbose:
    original: logical default \code{FALSE}. When \code{TRUE} it will print to console
      data.table split query used to split data.
    translation: ~
details:
  original: |2
        Argument \code{f} is just for consistency in usage to data.frame method. Recommended is to use \code{by} argument instead, it will be faster, more flexible, and by default will preserve order according to order in data.
  translation: ~
value:
  original: |2
        List of \code{data.table}s. If using \code{flatten} FALSE and \code{length(by) > 1L} then recursively nested lists having \code{data.table}s as leafs of grouping according to \code{by} argument.
  translation: ~
seealso:
  original: ' \code{\link{data.table}}, \code{\link{rbindlist}} '
  translation: ~
examples:
  original: |
    set.seed(123)
    DT = data.table(x1 = rep(letters[1:2], 6),
                    x2 = rep(letters[3:5], 4),
                    x3 = rep(letters[5:8], 3),
                    y = rnorm(12))
    DT = DT[sample(.N)]
    DF = as.data.frame(DT)

    # split consistency with data.frame: `x, f, drop`
    all.equal(
        split(DT, list(DT$x1, DT$x2)),
        lapply(split(DF, list(DF$x1, DF$x2)), setDT)
    )

    # nested list using `flatten` arguments
    split(DT, by=c("x1", "x2"))
    split(DT, by=c("x1", "x2"), flatten=FALSE)

    # dealing with factors
    fdt = DT[, c(lapply(.SD, as.factor), list(y=y)), .SDcols=x1:x3]
    fdf = as.data.frame(fdt)
    sdf = split(fdf, list(fdf$x1, fdf$x2))
    all.equal(
        split(fdt, by=c("x1", "x2"), sorted=TRUE),
        lapply(sdf[sort(names(sdf))], setDT)
    )

    # factors having unused levels, drop FALSE, TRUE
    fdt = DT[, .(x1 = as.factor(c(as.character(x1), "c"))[-13L],
                 x2 = as.factor(c("a", as.character(x2)))[-1L],
                 x3 = as.factor(c("a", as.character(x3), "z"))[c(-1L,-14L)],
                 y = y)]
    fdf = as.data.frame(fdt)
    sdf = split(fdf, list(fdf$x1, fdf$x2))
    all.equal(
        split(fdt, by=c("x1", "x2"), sorted=TRUE),
        lapply(sdf[sort(names(sdf))], setDT)
    )
    sdf = split(fdf, list(fdf$x1, fdf$x2), drop=TRUE)
    all.equal(
        split(fdt, by=c("x1", "x2"), sorted=TRUE, drop=TRUE),
        lapply(sdf[sort(names(sdf))], setDT)
    )
  translation: ~
untranslatable:
- alias
- name
- keyword
- concept
- usage
