title:
  original: fcase
  translation: ~
description:
  original: |
    \code{fcase} is a fast implementation of SQL \code{CASE WHEN} statement for R. Conceptually, \code{fcase} is a nested version of \code{\link{fifelse}} (with smarter implementation than manual nesting). It is comparable to \code{dplyr::case_when} and supports \code{bit64}'s \code{integer64} and \code{nanotime} classes.
  translation: ~
arguments:
  '...':
    original: ' A sequence consisting of logical condition (\code{when})-resulting
      value (\code{value}) \emph{pairs} in the following order \code{when1, value1,
      when2, value2, ..., whenN, valueN}. Logical conditions \code{when1, when2, ...,
      whenN} must all have the same length, type and attributes. Each \code{value}
      may either share length with \code{when} or be length 1. Please see Examples
      section for further details.'
    translation: ~
  default:
    original: ' Default return value, \code{NA} by default, for when all of the logical
      conditions \code{when1, when2, ..., whenN} are \code{FALSE} or missing for some
      entries. '
    translation: ~
details:
  original: |
    \code{fcase} evaluates each when-value pair in order, until it finds a \code{when} that is \code{TRUE}. It then returns the corresponding \code{value}. During evaluation, \code{value} will be evaluated regardless of whether the corresponding \code{when} is \code{TRUE} or not, which means recursive calls should be placed in the last when-value pair, see \code{Examples}.

    \code{default} is always evaluated, regardless of whether it is returned or not.
  translation: ~
value:
  original: |2
      Vector with the same length as the logical conditions (\code{when}) in \code{...}, filled with the corresponding values (\code{value}) from \code{...}, or eventually \code{default}. Attributes of output values \code{value1, value2, ...valueN} in \code{...} are preserved.
  translation: ~
seealso:
  original: |2
      \code{\link{fifelse}}
  translation: ~
examples:
  original: "x = 1:10\nfcase(\n\tx < 5L, 1L,\n\tx > 5L, 3L\n)\n\nfcase(\n\tx < 5L,
    1L:10L,\n\tx > 5L, 3L:12L\n)\n\n# Lazy evaluation example\nfcase(\n\tx < 5L, 1L,\n\tx
    >= 5L, 3L,\n\tx == 5L, stop(\"provided value is an unexpected one!\")\n)\n\n#
    fcase preserves attributes, example with dates\nfcase(\n\tx < 5L, as.Date(\"2019-10-11\"),\n\tx
    > 5L, as.Date(\"2019-10-14\")\n)\n\n# fcase example with factor; note the matching
    levels\nfcase(\n\tx < 5L, factor(\"a\", levels=letters[1:3]),\n\tx > 5L, factor(\"b\",
    levels=letters[1:3])\n)\n\n# Example of using the 'default' argument\nfcase(\n\tx
    < 5L, 1L,\n\tx > 5L, 3L,\n\tdefault = 5L\n)\n\n# fcase can be used for recursion,
    unlike fifelse\n# Recursive function to calculate the Greatest Common Divisor\ngcd_dt
    = function(x,y) {\n  r = x%%y\n  fcase(!r, y, r, gcd_dt(x, y)) # Recursive call
    must be in the last when-value pair\n}\ngcd_dt(10L, 1L)\n"
  translation: ~
untranslatable:
- alias
- name
- keyword
- concept
- usage
