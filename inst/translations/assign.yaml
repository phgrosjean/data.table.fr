title:
  original: ' Assignment by reference '
  translation: ~
description:
  original: |2+
        Fast add, remove and update subsets of columns, by reference. \code{:=} operator can be used in two ways: \code{LHS := RHS} form, and \code{Functional form}. See \code{Usage}.

        \code{set} is a low-overhead loop-able version of \code{:=}. It is particularly useful for repetitively updating rows of certain columns by reference (using a for-loop). See \code{Examples}. It can not perform grouping operations.

        \code{let} is an alias for the functional form and behaves exactly like \code{`:=`}.

  translation: ~
arguments:
  LHS:
    original: ' A character vector of column names (or numeric positions) or a variable
      that evaluates as such. If the column doesn''t exist, it is added, \emph{by
      reference}. '
    translation: ~
  RHS:
    original: ' A list of replacement values. It is recycled in the usual way to fill
      the number of rows satisfying \code{i}, if any.  To remove a column use \code{NULL}. '
    translation: ~
  x:
    original: ' A \code{data.table}. Or, \code{set()} accepts \code{data.frame}, too. '
    translation: ~
  i:
    original: " Optional. Indicates the rows on which the values must be updated.
      If not \\code{NULL}, implies \\emph{all rows}. Missing or zero values are ignored.
      The \\code{:=} form is more powerful as it allows adding/updating columns by
      reference based on \\emph{subsets} and \\code{joins}. See \\code{Details}.\n\n
      \   In \\code{set}, only integer type is allowed in \\code{i} indicating which
      rows \\code{value} should be assigned to. \\code{NULL} represents all rows more
      efficiently than creating a vector such as \\code{1:nrow(x)}. "
    translation: ~
  j:
    original: ' Column name(s) (character) or number(s) (integer) to be assigned \code{value}
      when column(s) already exist, and only column name(s) if they are to be created. '
    translation: ~
  value:
    original: ' A list of replacement values to assign by reference to \code{x[i,
      j]}. '
    translation: ~
details:
  original: |
    \code{:=} is defined for use in \code{j} only. It \emph{adds} or \emph{updates} or \emph{removes} column(s) by reference. It makes no copies of any part of memory at all. Please read \href{../doc/datatable-reference-semantics.html}{\code{vignette("datatable-reference-semantics")}} and follow with examples. Some typical usages are:

    \preformatted{
        DT[, col := val]                              # update (or add at the end if doesn't exist) a column called "col" with value "val" (recycled if necessary).
        DT[i, col := val]                             # same as above, but only for those rows specified in i and (for new columns) NA elsewhere.
        DT[i, "col a" := val]                         # same. column is called "col a"
        DT[i, (3:6) := val]                           # update existing columns 3:6 with value. Aside: parens are not required here since : already makes LHS a call rather than a symbol.
        DT[i, colvector := val, with = FALSE]         # OLD syntax. The contents of "colvector" in calling scope determine the column(s).
        DT[i, (colvector) := val]                     # same (NOW PREFERRED) shorthand syntax. The parens are enough to stop the LHS being a symbol; same as c(colvector).
        DT[i, colC := mean(colB), by = colA]          # update (or add) column called "colC" by reference by group. A major feature of `:=`.
        DT[,`:=`(new1 = sum(colB), new2 = sum(colC))] # Functional form
        DT[, let(new1 = sum(colB), new2 = sum(colC))] # New alias for functional form.
    }

    The \code{\link{.Last.updated}} variable contains the number of rows updated by the most recent \code{:=} or \code{set} calls, which may be useful, for example, in production settings for testing assumptions about the number of rows affected by a statement; see \code{\link{.Last.updated}} for details.

    Note that for efficiency no check is performed for duplicate assignments, i.e. if multiple values are passed for assignment to the same index, assignment to this index will occur repeatedly and sequentially; for a given use case, consider whether it makes sense to create your own test for duplicates, e.g. in production code.

    All of the following result in a friendly error (by design) :

    \preformatted{
        x := 1L
        DT[i, col] := val
        DT[i]$col := val
        DT[, {col1 := 1L; col2 := 2L}]                # Use the functional form, `:=`(), instead (see above).
    }

    For additional resources, please read \href{../doc/datatable-faq.html}{\code{vignette("datatable-faq")}}. Also have a look at StackOverflow's \href{https://stackoverflow.com/questions/tagged/data.table/}{data.table tag}.

    \code{:=} in \code{j} can be combined with all types of \code{i} (such as binary search), and all types of \code{by}. This a one reason why \code{:=} has been implemented in \code{j}. Please see \href{../doc/datatable-reference-semantics}{\code{vignette("datatable-reference-semantics")}} and also \code{FAQ 2.16} for analogies to SQL.

    When \code{LHS} is a factor column and \code{RHS} is a character vector with items missing from the factor levels, the new level(s) are automatically added (by reference, efficiently), unlike base methods.

    Unlike \code{<-} for \code{data.frame}, the (potentially large) LHS is not coerced to match the type of the (often small) RHS. Instead the RHS is coerced to match the type of the LHS, if necessary. Where this involves double precision values being coerced to an integer column, a warning is given when fractional data is truncated. It is best to get the column types correct up front and stick to them. Changing a column type is possible but deliberately harder: provide a whole column as the RHS. This RHS is then \emph{plonked} into that column slot and we call this \emph{plonk syntax}, or \emph{replace column syntax} if you prefer. By needing to construct a full length vector of a new type, you as the user are more aware of what is happening and it is clearer to readers of your code that you really do intend to change the column type; e.g., \code{DT[, colA:=as.integer(colA)]}. A plonk occurs whenever you provide a RHS value to `:=` which is \code{nrow} long. When a column is \emph{plonked}, the original column is not updated by reference because that would entail updating every single element of that column whereas the plonk is just one column pointer update.

    \code{data.table}s are \emph{not} copied-on-change by \code{:=}, \code{setkey} or any of the other \code{set*} functions. See \code{\link{copy}}.
  translation: ~
section{Advanced (internals):}:
  original: |
    It is easy to see how \emph{sub-assigning} to existing columns is done internally. Removing columns by reference is also straightforward by modifying the vector of column pointers only (using memmove in C). However adding (new) columns is more tricky as to how the \code{data.table} can be grown \emph{by reference}: the list vector of column pointers is \emph{over-allocated}, see \code{\link{truelength}}. By defining \code{:=} in \code{j} we believe update syntax is natural, and scales, but it also bypasses \code{[<-} dispatch and allows \code{:=} to update by reference with no copies of any part of memory at all.

    Since \code{[.data.table} incurs overhead to check the existence and type of arguments (for example), \code{set()} provides direct (but less flexible) assignment by reference with low overhead, appropriate for use inside a \code{for} loop. See examples. \code{:=} is more powerful and flexible than \code{set()} because \code{:=} is intended to be combined with \code{i} and \code{by} in single queries on large datasets.
  translation: ~
note:
  original: |2
        \code{DT[a > 4, b := c]} is different from \code{DT[a > 4][, b := c]}. The first expression updates (or adds) column \code{b} with the value \code{c} on those rows where \code{a > 4} evaluates to \code{TRUE}. \code{X} is updated \emph{by reference}, therefore no assignment needed.  Note that this does not apply when `i` is missing, i.e. \code{DT[]}.

        The second expression on the other hand updates a \emph{new} \code{data.table} that's returned by the subset operation. Since the subsetted data.table is ephemeral (it is not assigned to a symbol), the result would be lost; unless the result is assigned, for example, as follows: \code{ans <- DT[a > 4][, b := c]}.
  translation: ~
value:
  original: |
    \code{DT} is modified by reference and returned invisibly. If you require a copy, take a \code{\link{copy}} first (using \code{DT2 = copy(DT)}).
  translation: ~
seealso:
  original: |2
     \code{\link{data.table}}, \code{\link{copy}}, \code{\link{setalloccol}}, \code{\link{truelength}}, \code{\link{set}}, \code{\link{.Last.updated}}
  translation: ~
examples:
  original: "DT = data.table(a = LETTERS[c(3L,1:3)], b = 4:7)\nDT[, c := 8]                #
    add a numeric column, 8 for all rows\nDT[, d := 9L]               # add an integer
    column, 9L for all rows\nDT[, c := NULL]             # remove column c\nDT[2,
    d := -8L]             # subassign by reference to d; 2nd row is -8L now\nDT                          #
    DT changed by reference\nDT[2, d := 10L][]           # shorthand for update and
    print\n\nDT[b > 4, b := d * 2L]      # subassign to b with d*2L on those rows
    where b > 4 is TRUE\nDT[b > 4][, b := d * 2L]    # different from above. [, :=
    ] is performed on the subset\n                            # which is an new (ephemeral)
    data.table. Result needs to be\n                            # assigned to a variable
    (using `<-`).\n\nDT[, e := mean(d), by = a]  # add new column by group by reference\nDT[\"A\",
    b := 0L, on = \"a\"]  # ad-hoc update of column b for group \"A\" using\n\t\t\t
    \   # joins-as-subsets with binary search and 'on='\n# same as above but using
    keys\nsetkey(DT, a)\nDT[\"A\", b := 0L]            # binary search for group \"A\"
    and set column b using keys\nDT[\"B\", f := mean(d)]       # subassign to new
    column, NA initialized\n\n# Adding multiple columns\n## by name\nDT[ , c('sin_d',
    'log_e', 'cos_d') :=\n   .(sin(d), log(e), cos(d))]\n## by patterned name\nDT[
    , paste(c('sin', 'cos'), 'b', sep = '_') :=\n   .(sin(b), cos(b))]\n## using lapply
    & .SD\nDT[ , paste0('tan_', c('b', 'd', 'e')) :=\n   lapply(.SD, tan), .SDcols
    = c('b', 'd', 'e')]\n## using forced evaluation to disambiguate a vector of names\n##
    \  and overwrite existing columns with their squares\nsq_cols = c('b', 'd', 'e')\nDT[
    , (sq_cols) := lapply(.SD, `^`, 2L), .SDcols = sq_cols]\n## by integer (NB: for
    robustness, it is not recommended\n##   to use explicit integers to update/define
    columns)\nDT[ , c(2L, 3L, 4L) := .(sqrt(b), sqrt(d), sqrt(e))]\n## by implicit
    integer\nDT[ , grep('a$', names(DT)) := tolower(a)]\n## by implicit integer, using
    forced evaluation\nsq_col_idx = grep('d$', names(DT))\nDT[ , (sq_col_idx) := lapply(.SD,
    dnorm),\n   .SDcols = sq_col_idx]\n\n# Examples using `set` function\n## Set value
    for single cell\nset(DT, 1L, \"b\", 10L)\n## Set values for multiple columns in
    a specific row\nset(DT, 2L, c(\"b\", \"d\"), list(20L, 30L))\n## Set values by
    column indices\nset(DT, 3L, c(2L, 4L), list(40L, 50L))\n## Set value for an entire
    column without specifying rows\nset(DT, j = \"b\", value = 100L)\nset(DT, NULL,
    \"b\", 100L) # equivalent\n## Set values for multiple columns without specifying
    rows\nset(DT, j = c(\"b\", \"d\"), value = list(200L, 300L))\n## Set values for
    multiple columns with multiple specified rows.\nset(DT, c(1L, 3L), c(\"b\", \"d\"),
    value = list(500L, 800L))\n\n\\dontrun{\n# Speed example:\n\nm = matrix(1, nrow
    = 2e6L, ncol = 100L)\nDF = as.data.frame(m)\nDT = as.data.table(m)\n\nsystem.time(for
    (i in 1:1000) DF[i, 1] = i)\n# 15.856 seconds\nsystem.time(for (i in 1:1000) DT[i,
    V1 := i])\n# 0.279 seconds  (57 times faster)\nsystem.time(for (i in 1:1000) set(DT,
    i, 1L, i))\n# 0.002 seconds  (7930 times faster, overhead of [.data.table is avoided)\n\n#
    However, normally, we call [.data.table *once* on *large* data, not many times
    on small data.\n# The above is to demonstrate overhead, not to recommend looping
    in this way. But the option\n# of set() is there if you need it.\n}\n\n"
  translation: ~
untranslatable:
- alias
- name
- keyword
- concept
- usage
