title:
  original: Rolling functions
  translation: ~
description:
  original: |2
      Fast rolling functions to calculate aggregates on sliding windows. Function name and arguments are experimental.
  translation: ~
arguments:
  x:
    original: ' Vector, \code{data.frame} or \code{data.table} of integer, numeric
      or logical columns over which to calculate the windowed aggregations. May also
      be a list, in which case the rolling function is applied to each of its elements. '
    translation: ~
  'n':
    original: ' Integer vector giving rolling window size(s). This is the \emph{total}
      number of included values. Adaptive rolling functions also accept a list of
      integer vectors. '
    translation: ~
  fill:
    original: ' Numeric; value to pad by. Defaults to \code{NA}. '
    translation: ~
  algo:
    original: " Character, default \\code{\"fast\"}. When set to \\code{\"exact\"},
      a slower (but more accurate) algorithm is used. It\n    suffers less from floating
      point rounding errors by performing an extra pass, and carefully handles all
      non-finite values.\n    It will use multiple cores where available. See Details
      for more information. "
    translation: ~
  align:
    original: ' Character, specifying the "alignment" of the rolling window, defaulting
      to \code{"right"}. \code{"right"} covers preceding rows (the window \emph{ends}
      on the current value); \code{"left"} covers following rows (the window \emph{starts}
      on the current value); \code{"center"} is halfway in between (the window is
      \emph{centered} on the current value, biased towards \code{"left"} when \code{n}
      is even). '
    translation: ~
  na.rm:
    original: " Logical, default \\code{FALSE}. Should missing values be removed when\n
      \   calculating window? For details on handling other non-finite values, see
      Details. "
    translation: ~
  hasNA:
    original: " Logical. If it is known that \\code{x} contains \\code{NA}\n    then
      setting this to \\code{TRUE} will speed up calculation. Defaults to \\code{NA}. "
    translation: ~
  adaptive:
    original: ' Logical, default \code{FALSE}. Should the rolling function be calculated
      adaptively? See Details below. '
    translation: ~
  FUN:
    original: ' The function to be applied to the rolling window; see Details for
      restrictions. '
    translation: ~
  \dots:
    original: ' Extra arguments passed to \code{FUN} in \code{frollapply}. '
    translation: ~
details:
  original: "  \\code{froll*} functions accept vectors, lists, \\code{data.frame}s
    or\n  \\code{data.table}s. They always return a list except when the input is
    a\n  \\code{vector} and \\code{length(n)==1}, in which case a \\code{vector}\n
    \ is returned, for convenience. Thus, rolling functions can be used\n  conveniently
    within \\code{data.table} syntax.\n\n  Argument \\code{n} allows multiple values
    to apply rolling functions on\n  multiple window sizes. If \\code{adaptive=TRUE},
    then \\code{n} must be a list.\n  Each list element must be integer vector of
    window sizes corresponding\n  to every single observation in each column; see
    Examples.\n\n  When \\code{algo=\"fast\"} an \\emph{\"on-line\"} algorithm is
    used, and\n  all of \\code{NaN, +Inf, -Inf} are treated as \\code{NA}.\n  Setting
    \\code{algo=\"exact\"} will make rolling functions to use a more\n  computationally-intensive
    algorithm that suffers less from floating point\n  rounding error (the same consideration
    applies to \\code{\\link[base]{mean}}).\n  \\code{algo=\"exact\"} also handles
    \\code{NaN, +Inf, -Inf} consistently to\n  base R. In case of some functions (like
    \\emph{mean}), it will additionally\n  make extra pass to perform floating point
    error correction. Error\n  corrections might not be truly exact on some platforms
    (like Windows)\n  when using multiple threads.\n\n  Adaptive rolling functions
    are a special case where each\n  observation has its own corresponding rolling
    window width. Due to the logic\n  of adaptive rolling functions, the following
    restrictions apply:\n  \\itemize{\n    \\item \\code{align} only \\code{\"right\"}.
    \n    \\item if list of vectors is passed to \\code{x}, then all\n      vectors
    within it must have equal length.\n  }\n\n  When multiple columns or multiple
    windows width are provided, then they\n  are run in parallel. The exception is
    for \\code{algo=\"exact\"}, which runs in\n  parallel already.\n\n  \\code{frollapply}
    computes rolling aggregate on arbitrary R functions.\n  The input \\code{x} (first
    argument) to the function \\code{FUN}\n  is coerced to \\emph{numeric} beforehand
    and \\code{FUN}\n  has to return a scalar \\emph{numeric} value. Checks for that
    are made only\n  during the first iteration when \\code{FUN} is evaluated. Edge
    cases can be\n  found in examples below. Any R function is supported, but it is
    not optimized\n  using our own C implementation -- hence, for example, using \\code{frollapply}\n
    \ to compute a rolling average is inefficient. It is also always single-threaded\n
    \ because there is no thread-safe API to R's C \\code{eval}. Nevertheless we've\n
    \ seen the computation speed up vis-a-vis versions implemented in base R.\n"
  translation: ~
value:
  original: |2
      A list except when the input is a \code{vector} and
      \code{length(n)==1} in which case a \code{vector} is returned.
  translation: ~
note:
  original: "  Users coming from most popular package for rolling functions\n  \\code{zoo}
    might expect following differences in \\code{data.table}\n  implementation.\n
    \ \\itemize{\n    \\item rolling function will always return result of the same
    length as input.\n    \\item \\code{fill} defaults to \\code{NA}. \n    \\item
    \\code{fill} accepts only constant values. It does not support\n      for \\emph{na.locf}
    or other functions.\n    \\item \\code{align} defaults to \\code{\"right\"}. \n
    \   \\item \\code{na.rm} is respected, and other functions are not needed\n      when
    input contains \\code{NA}.\n    \\item integers and logical are always coerced
    to double. \n    \\item when \\code{adaptive=FALSE} (default), then \\code{n}
    must be a\n      numeric vector. List is not accepted.\n    \\item when \\code{adaptive=TRUE},
    then \\code{n} must be vector of\n      length equal to \\code{nrow(x)}, or list
    of such vectors.\n    \\item \\code{partial} window feature is not supported,
    although it can\n      be accomplished by using \\code{adaptive=TRUE}, see\n      examples.
    \\code{NA} is always returned for incomplete windows. \n  }\n\n  Be aware that
    rolling functions operates on the physical order of input.\n  If the intent is
    to roll values in a vector by a logical window, for\n  example an hour, or a day,
    one has to ensure that there are no gaps in\n  input. For details see \\href{https://github.com/Rdatatable/data.table/issues/3241}{issue
    #3241}.\n"
  translation: ~
examples:
  original: |
    d = as.data.table(list(1:6/2, 3:8/4))
    # rollmean of single vector and single window
    frollmean(d[, V1], 3)
    # multiple columns at once
    frollmean(d, 3)
    # multiple windows at once
    frollmean(d[, .(V1)], c(3, 4))
    # multiple columns and multiple windows at once
    frollmean(d, c(3, 4))
    ## three calls above will use multiple cores when available

    # partial window using adaptive rolling function
    an = function(n, len) c(seq.int(n), rep(n, len-n))
    n = an(3, nrow(d))
    frollmean(d, n, adaptive=TRUE)

    # frollsum
    frollsum(d, 3:4)

    # frollapply
    frollapply(d, 3:4, sum)
    f = function(x, ...) if (sum(x, ...)>5) min(x, ...) else max(x, ...)
    frollapply(d, 3:4, f, na.rm=TRUE)

    # performance vs exactness
    set.seed(108)
    x = sample(c(rnorm(1e3, 1e6, 5e5), 5e9, 5e-9))
    n = 15
    ma = function(x, n, na.rm=FALSE) {
      ans = rep(NA_real_, nx<-length(x))
      for (i in n:nx) ans[i] = mean(x[(i-n+1):i], na.rm=na.rm)
      ans
    }
    fastma = function(x, n, na.rm) {
      if (!missing(na.rm)) stop("NAs are unsupported, wrongly propagated by cumsum")
      cs = cumsum(x)
      scs = shift(cs, n)
      scs[n] = 0
      as.double((cs-scs)/n)
    }
    system.time(ans1<-ma(x, n))
    system.time(ans2<-fastma(x, n))
    system.time(ans3<-frollmean(x, n))
    system.time(ans4<-frollmean(x, n, algo="exact"))
    system.time(ans5<-frollapply(x, n, mean))
    anserr = list(
      fastma = ans2-ans1,
      froll_fast = ans3-ans1,
      froll_exact = ans4-ans1,
      frollapply = ans5-ans1
    )
    errs = sapply(lapply(anserr, abs), sum, na.rm=TRUE)
    sapply(errs, format, scientific=FALSE) # roundoff

    # frollapply corner cases
    f = function(x) head(x, 2)     ## FUN returns non length 1
    try(frollapply(1:5, 3, f))
    f = function(x) {              ## FUN sometimes returns non length 1
      n = length(x)
      # length 1 will be returned only for first iteration where we check length
      if (n==x[n]) x[1L] else range(x) # range(x)[2L] is silently ignored!
    }
    frollapply(1:5, 3, f)
    options(datatable.verbose=TRUE)
    x = c(1,2,1,1,1,2,3,2)
    frollapply(x, 3, uniqueN)     ## FUN returns integer
    numUniqueN = function(x) as.numeric(uniqueN(x))
    frollapply(x, 3, numUniqueN)
    x = c(1,2,1,1,NA,2,NA,2)
    frollapply(x, 3, anyNA)       ## FUN returns logical
    as.logical(frollapply(x, 3, anyNA))
    options(datatable.verbose=FALSE)
    f = function(x) {             ## FUN returns character
      if (sum(x)>5) "big" else "small"
    }
    try(frollapply(1:5, 3, f))
    f = function(x) {             ## FUN is not type-stable
      n = length(x)
      # double type will be returned only for first iteration where we check type
      if (n==x[n]) 1 else NA # NA logical turns into garbage without coercion to double
    }
    try(frollapply(1:5, 3, f))
  translation: ~
seealso:
  original: |2
      \code{\link{shift}}, \code{\link{data.table}}
  translation: ~
references:
  original: |2
      \href{https://en.wikipedia.org/wiki/Round-off_error}{Round-off error}
  translation: ~
untranslatable:
- alias
- name
- keyword
- concept
- usage
