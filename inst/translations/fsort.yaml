title:
  original: Fast parallel sort
  translation: ~
description:
  original: |2
      Similar to \code{base::sort} but fast using parallelism. Experimental.
  translation: ~
arguments:
  x:
    original: ' A vector. Type double, currently. '
    translation: ~
  decreasing:
    original: ' Decreasing order? '
    translation: ~
  na.last:
    original: ' Control treatment of \code{NA}s. If \code{TRUE}, missing values in
      the data are put last; if \code{FALSE}, they are put first; if \code{NA}, they
      are removed; if \code{"keep"} they are kept with rank \code{NA}. '
    translation: ~
  internal:
    original: ' Internal use only. Temporary variable. Will be removed. '
    translation: ~
  verbose:
    original: ' Print tracing information. '
    translation: ~
  \dots:
    original: ' Not sure yet. Should be consistent with base R.'
    translation: ~
details:
  original: |2
      Process will raise error if \code{x} contains negative values.
      Unless \code{x} is already sorted \code{fsort} will redirect processing to slower single threaded \emph{order} followed by \emph{subset} in following cases:
      \itemize{
        \item data type other than \emph{double} (\emph{numeric})
        \item data having \code{NA}s
        \item \code{decreasing==FALSE}
      }
  translation: ~
value:
  original: |2
      The input in sorted order.
  translation: ~
examples:
  original: |
    x = runif(1e6)
    system.time(ans1 <- sort(x, method="quick"))
    system.time(ans2 <- fsort(x))
    identical(ans1, ans2)
  translation: ~
untranslatable:
- alias
- name
- keyword
- concept
- usage
